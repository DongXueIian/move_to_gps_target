amcl:  # AMCL节点的配置开始
  ros__parameters:  # ROS 2参数命名空间
    use_sim_time: True  # 使用仿真时间，对于仿真环境设置为True，实际硬件设置为False
    alpha1: 0.2  # 旋转运动的噪声参数
    alpha2: 0.2  # 旋转后的直线运动的噪声参数
    alpha3: 0.2  # 直线运动的噪声参数
    alpha4: 0.2  # 直线后的旋转运动的噪声参数
    alpha5: 0.2  # 传感器噪声参数
    base_frame_id: "base_footprint"  # 机器人底盘的参考框架ID
    beam_skip_distance: 0.5  # 在进行激光模型计算时跳过的光束距离
    beam_skip_error_threshold: 0.9  # 允许的最大光束跳过错误阈值
    beam_skip_threshold: 0.3  # 光束跳过阈值
    do_beamskip: True  # 是否执行光束跳过优化
    global_frame_id: "map"  # 全局参考框架ID
    lambda_short: 0.1  # 短距离测量的指数衰减速率
    laser_likelihood_max_dist: 2.0  # 激光似然性计算的最大距离
    laser_max_range: 40.0  # 激光器的最大测量范围
    laser_min_range: -1.0  # 激光器的最小测量范围，-1表示忽略
    laser_model_type: "likelihood_field"  # 使用的激光模型类型
    max_beams: 60  # 用于每个粒子进行估算的最大光束数
    max_particles: 2000  # 粒子滤波器中的最大粒子数
    min_particles: 500  # 粒子滤波器中的最小粒子数
    odom_frame_id: "odom"  # 里程计的参考框架ID
    pf_err: 0.15  # 粒子滤波器的误差参数
    pf_z: 0.99  # 粒子滤波器的测量更新参数
    recovery_alpha_fast: 0.0  # 快速收敛率
    recovery_alpha_slow: 0.0  # 慢速收敛率
    resample_interval: 1  # 重采样间隔，以周期为单位
    robot_model_type: "nav2_amcl::DifferentialMotionModel"  # 机器人运动模型类型
    save_pose_rate: 1.0  # 保存姿势的频率，单位为Hz
    sigma_hit: 0.2  # 测量的标准差
    tf_broadcast: false  # 是否广播坐标变换
    transform_tolerance: 2.0  # 坐标变换容忍的延迟，单位为秒
    update_min_a: 0.1  # 触发更新的最小角度变化
    update_min_d: 0.25  # 触发更新的最小距离变化
    z_hit: 0.5  # 测量模型的命中部分的权重
    z_max: 0.05  # 测量模型中最大距离的权重
    z_rand: 0.5  # 测量模型的随机部分的权重
    z_short: 0.05  # 测量模型的短距离命中部分的权重
    scan_topic: scan  # 激光扫描话题的名称

# bt_navigator:
#   ros__parameters:
#     global_frame: map  # 全局参考框架，通常设置为地图坐标系。
#     robot_base_frame: base_link  # 机器人的基础坐标系，通常是机器人底部的中心点。
#     odom_topic: /odom  # 里程计信息的主题，用于获取机器人当前的位置和速度。
#     bt_loop_duration: 10  # 行为树循环的持续时间，单位为毫秒。这决定了行为树节点评估的频率。
#     default_server_timeout: 20  # 默认服务器超时时间（秒），用于等待行为树节点服务器的响应。
#     wait_for_service_timeout: 1000  # 等待服务可用的超时时间，单位为毫秒。这是启动时等待导航服务变得可用的最长时间。
#     action_server_result_timeout: 900.0  # 动作服务器结果的超时时间，单位为秒。这是等待行为树中的动作节点完成的最长时间。
    # # 定义了两种基本的导航方式: "navigate_to_pose" 和 "navigate_through_poses"。
    # navigators: ["navigate_to_pose", "navigate_through_poses"]
    # # "navigate_to_pose" 导航方式配置:
    # # 当机器人需要导航到一个特定位置时使用这种方式。
    # navigate_to_pose:
    #   # 使用的插件是 "nav2_bt_navigator::NavigateToPoseNavigator"。
    #   # 这个插件告诉机器人如何计划和移动到一个指定的位置。
    #   plugin: "nav2_bt_navigator::NavigateToPoseNavigator"
    # # "navigate_through_poses" 导航方式配置:
    # # 当机器人需要依次通过多个点到达目的地时使用这种方式。
    # navigate_through_poses:
    #   # 使用的插件是 "nav2_bt_navigator::NavigateThroughPosesNavigator"。
    #   # 这个插件让机器人能够理解如何依次通过一系列的位置点来完成导航任务。
    #   plugin: "nav2_bt_navigator::NavigateThroughPosesNavigator"

#     # 'default_nav_through_poses_bt_xml' 和 'default_nav_to_pose_bt_xml' 是使用默认的行为树XML文件。
#     # 默认情况下使用的是nav2_bt_navigator包中的带有重新规划和恢复机制的XML文件。
#     # 它们可以在这里设置，或通过父启动文件的RewrittenYaml重新映射到Nav2。

#     # plugin_lib_names 是用来添加自定义BT插件到执行器的（字符串向量）。
#     # 内置插件会自动添加，不需要在这里列出。
#     # plugin_lib_names: []

#     error_code_names:  # 列出了导航过程中可能遇到的错误代码名称。
#       - compute_path_error_code
#       - follow_path_error_code


bt_navigator:  # 行为树导航器的配置开始
  ros__parameters:
    use_sim_time: True  # 使用仿真时间。在仿真环境中设置为True，实际硬件中设置为False
    global_frame: map  # 全局参考框架ID
    robot_base_frame: base_link  # 机器人基础框架ID
    odom_topic: /odom  # 里程计话题
    bt_loop_duration: 50  # 行为树循环的持续时间（以毫秒为单位）
    default_server_timeout: 20  # 默认的服务器超时时间（以秒为单位）
    # default_nav_to_pose_bt_xml: "package://myTestPockage/behavior_trees/my_custom_nav_to_pose_bt.xml"
    #'default_nav_through_poses_bt_xml' 和 'default_nav_to_pose_bt_xml' 使用默认值：
    #nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml 和 
    #nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml。
    # 可以在这里设置它们，也可以通过一个父级启动文件到 Nav2 的 RewrittenYaml 重映射来设置。
    plugin_lib_names:  # 行为树节点插件库名称列表
      - nav2_compute_path_to_pose_action_bt_node  # 计算到特定姿态的路径
      - nav2_compute_path_through_poses_action_bt_node  # 计算通过多个姿态的路径
      - nav2_smooth_path_action_bt_node  # 平滑路径
      - nav2_follow_path_action_bt_node  # 跟随路径
      - nav2_spin_action_bt_node  # 原地旋转
      - nav2_wait_action_bt_node  # 等待
      - nav2_assisted_teleop_action_bt_node  # 协助遥控操作
      - nav2_back_up_action_bt_node  # 后退
      - nav2_drive_on_heading_bt_node  # 沿特定方向前进
      - nav2_clear_costmap_service_bt_node  # 清除代价地图服务
      - nav2_is_stuck_condition_bt_node  # 判断是否卡住
      - nav2_goal_reached_condition_bt_node  # 判断是否到达目标
      - nav2_goal_updated_condition_bt_node  # 判断目标是否更新
      - nav2_globally_updated_goal_condition_bt_node  # 判断全局目标是否更新
      - nav2_is_path_valid_condition_bt_node  # 判断路径是否有效
      - nav2_initial_pose_received_condition_bt_node  # 判断是否接收到初始姿态
      - nav2_reinitialize_global_localization_service_bt_node  # 重新初始化全局定位服务
      - nav2_rate_controller_bt_node  # 频率控制器
      - nav2_distance_controller_bt_node  # 距离控制器
      - nav2_speed_controller_bt_node  # 速度控制器
      - nav2_truncate_path_action_bt_node  # 截断路径
      - nav2_truncate_path_local_action_bt_node  # 截断局部路径
      - nav2_goal_updater_node_bt_node  # 目标更新节点
      - nav2_recovery_node_bt_node  # 恢复节点
      - nav2_pipeline_sequence_bt_node  # 管道序列节点
      - nav2_round_robin_node_bt_node  # 轮询节点
      - nav2_transform_available_condition_bt_node  # 判断变换是否可用
      - nav2_time_expired_condition_bt_node  # 判断时间是否过期
      - nav2_path_expiring_timer_condition  # 路径过期计时器条件
      - nav2_distance_traveled_condition_bt_node  # 判断行驶距离
      - nav2_single_trigger_bt_node  # 单次触发节点
      - nav2_goal_updated_controller_bt_node  # 目标更新控制器
      - nav2_is_battery_low_condition_bt_node  # 判断电池是否低电量
      - nav2_navigate_through_poses_action_bt_node  # 通过多个姿态导航
      - nav2_navigate_to_pose_action_bt_node  # 导航到特定姿态
      - nav2_remove_passed_goals_action_bt_node  # 移除通过的目标
      - nav2_planner_selector_bt_node  # 规划器选择器
      - nav2_controller_selector_bt_node  # 控制器选择器
      - nav2_goal_checker_selector_bt_node  # 目标检查器选择器
      - nav2_controller_cancel_bt_node  # 取消控制器
      - nav2_path_longer_on_approach_bt_node  # 接近时路径变长
      - nav2_wait_cancel_bt_node  # 取消等待
      - nav2_spin_cancel_bt_node  # 取消旋转
      - nav2_back_up_cancel_bt_node  # 取消后退
      - nav2_assisted_teleop_cancel_bt_node  # 取消协助遥控
      - nav2_drive_on_heading_cancel_bt_node  # 取消沿特定方向前进
      - nav2_is_battery_charging_condition_bt_node  # 判断电池是否在充电

bt_navigator_navigate_through_poses_rclcpp_node:  # 导航器通过姿势节点配置
  ros__parameters:  # ROS参数
    use_sim_time: True  # 使用仿真时间

bt_navigator_navigate_to_pose_rclcpp_node:  # 导航器到姿势节点配置
  ros__parameters:  # ROS参数
    use_sim_time: True  # 使用仿真时间


# MPPI控制器服务器配置
# controller_server:
#   ros__parameters:
#     controller_frequency: 30.0
#     FollowPath:
#       plugin: "nav2_mppi_controller::MPPIController"
#       time_steps: 56
#       model_dt: 0.05
#       batch_size: 2000
#       vx_std: 0.2
#       vy_std: 0.2
#       wz_std: 0.4
#       vx_max: 0.5
#       vx_min: -0.35
#       vy_max: 0.5
#       wz_max: 1.9
#       iteration_count: 1
#       prune_distance: 1.7
#       transform_tolerance: 0.1
#       temperature: 0.3
#       gamma: 0.015
#       motion_model: "DiffDrive"
#       visualize: false
#       reset_period: 1.0 # (only in Humble)
#       regenerate_noises: false
#       TrajectoryVisualizer:
#         trajectory_step: 5
#         time_step: 3
#       AckermannConstraints:
#         min_turning_r: 0.2
#       critics: ["ConstraintCritic", "CostCritic", "GoalCritic", "GoalAngleCritic", "PathAlignCritic", "PathFollowCritic", "PathAngleCritic", "PreferForwardCritic"]
#       ConstraintCritic:
#         enabled: true
#         cost_power: 1
#         cost_weight: 4.0
#       GoalCritic:
#         enabled: true
#         cost_power: 1
#         cost_weight: 5.0
#         threshold_to_consider: 1.4
#       GoalAngleCritic:
#         enabled: true
#         cost_power: 1
#         cost_weight: 3.0
#         threshold_to_consider: 0.5
#       PreferForwardCritic:
#         enabled: true
#         cost_power: 1
#         cost_weight: 5.0
#         threshold_to_consider: 0.5
#       # ObstaclesCritic:
#       #   enabled: true
#       #   cost_power: 1
#       #   repulsion_weight: 1.5
#       #   critical_weight: 20.0
#       #   consider_footprint: false
#       #   collision_cost: 10000.0
#       #   collision_margin_distance: 0.1
#       #   near_goal_distance: 0.5
#       #   inflation_radius: 0.55 # (only in Humble)
#       #   cost_scaling_factor: 10.0 # (only in Humble)
#       CostCritic:
#         enabled: true
#         cost_power: 1
#         cost_weight: 3.81
#         critical_cost: 300.0
#         consider_footprint: true
#         collision_cost: 1000000.0
#         near_goal_distance: 1.0
#         trajectory_point_step: 2
#       PathAlignCritic:
#         enabled: true
#         cost_power: 1
#         cost_weight: 14.0
#         max_path_occupancy_ratio: 0.05
#         trajectory_point_step: 4
#         threshold_to_consider: 0.5
#         offset_from_furthest: 20
#         use_path_orientations: false
#       PathFollowCritic:
#         enabled: true
#         cost_power: 1
#         cost_weight: 5.0
#         offset_from_furthest: 5
#         threshold_to_consider: 1.4
#       PathAngleCritic:
#         enabled: true
#         cost_power: 1
#         cost_weight: 2.0
#         offset_from_furthest: 4
#         threshold_to_consider: 0.5
#         max_angle_to_furthest: 1.0
#         mode: 0
#       # VelocityDeadbandCritic:
#       #   enabled: true
#       #   cost_power: 1
#       #   cost_weight: 35.0
#       #   deadband_velocities: [0.05, 0.05, 0.05]
#       # TwirlingCritic:
#       #   enabled: true
#       #   twirling_cost_power: 1
#       #   twirling_cost_weight: 10.0


# dwb控制器服务器配置
controller_server:
  ros__parameters:
    use_sim_time: True  # 使用仿真时间
    controller_frequency: 20.0  # 控制器更新频率，每秒20次
    min_x_velocity_threshold: 0.001  # 最小的x轴速度阈值，用于判断机器人是否基本停止
    min_y_velocity_threshold: 0.5  # 最小的y轴速度阈值，同上
    min_theta_velocity_threshold: 0.001  # 最小的旋转速度阈值，同上
    failure_tolerance: 0.3  # 失败容忍度，可能用于容忍路径跟随中的小偏差
    progress_checker_plugin: "progress_checker"  # 进度检查插件名称
    goal_checker_plugins: ["general_goal_checker"]  # 目标检查插件列表
    controller_plugins: ["FollowPath"]  # 控制器插件列表，此处使用的是FollowPath插件

    # 进度检查器参数
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"  # 使用的进度检查插件
      required_movement_radius: 0.5  # 要求的移动半径，用于检测进度
      movement_time_allowance: 10.0  # 移动时间容许值，超过这个时间没有进度则可能触发重规划或停止

    # 目标检查器参数
    #precise_goal_checker:  # 精确目标检查器的配置项
      # plugin: "nav2_controller::SimpleGoalChecker"  # 使用的插件为SimpleGoalChecker，它是一个基本的目标检查器
      # xy_goal_tolerance: 0.25  # xy目标容忍度，表示机器人中心与目标位置之间在xy平面上的最大允许距离，单位为米
      # yaw_goal_tolerance: 0.25  # 姿态（yaw角）目标容忍度，表示机器人当前姿态与目标姿态之间的最大允许差异，单位为弧度
      # stateful: True  # 是否保持状态。如果为True，目标检查器在连续的检查调用中会保持一些内部状态，以便更精确地判断是否达到目标

    # 目标检查器参数
    general_goal_checker:
      stateful: True  # 是否保持状态，对于连续检查很有用
      plugin: "nav2_controller::SimpleGoalChecker"  # 使用的目标检查插件
      xy_goal_tolerance: 0.5  # 到达目标位置的容许误差范围，单位为米
      yaw_goal_tolerance: 0.25  # 到达目标旋转角度的容许误差范围，单位为弧度

    #可以考虑换成TEB DWA
    # DWB参数
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"  # 使用DWB作为局部路径规划器的插件
      
      debug_trajectory_details: True  # 开启调试，以便输出轨迹细节信息

      update_frequency: 30.0  

      min_vel_x: 0.0  # 最小x轴速度
      min_vel_y: 0.0  # 最小y轴速度，对于非全向机器人通常为0
      max_vel_x: 10.0  # 最大x轴速度
      max_vel_y: 0.0  # 最大y轴速度，对于非全向机器人通常为0
      max_vel_theta: 0.52  # 最大角速度
      min_speed_xy: 0.0  # 最小平移速度
      max_speed_xy: 10.0  # 最大平移速度
      min_speed_theta: 0.0  # 最小旋转速度
      acc_lim_x: 4.0  # x轴加速度限制
      acc_lim_y: 0.0  # y轴加速度限制，对于非全向机器人通常为0
      acc_lim_theta: 1.0  # 角加速度限制
      decel_lim_x: -4.0  # x轴减速度限制
      decel_lim_y: 0.0  # y轴减速度限制，对于非全向机器人通常为0
      decel_lim_theta: -1.0  # 角减速度限制
      vx_samples: 40  # x轴速度采样数
      vy_samples: 0  # y轴速度采样数，对于非全向机器人可能不适用
      vtheta_samples: 40  # 角速度采样数
      sim_time: 4.0  # 轨迹模拟时间
      linear_granularity: 0.15  # 线性轨迹的粒度
      angular_granularity: 0.03  # 角轨迹的粒度
      # occdist_scale: 0.02 躲避障碍物
      transform_tolerance: 4.0  # 坐标变换容忍度
      xy_goal_tolerance: 0.5  # 到达目标的xy容忍度
      trans_stopped_velocity: 0.15  # 低于此速度则认为是停止状态
      short_circuit_trajectory_evaluation: True  # 若为真，则在找到有效轨迹时停止评估
      stateful: True  # 若为真，则规划器会记住上一次的状态
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]  # 使用的评价函数列表
      # 各种评价函数的参数
      BaseObstacle.scale: 0.02
      PathAlign.scale: 32.0
      PathAlign.forward_point_distance: 0.1  # 路径对齐评价的前向点距离
      GoalAlign.scale: 24.0
      GoalAlign.forward_point_distance: 0.1  # 目标对齐评价的前向点距离
      PathDist.scale: 32.0  # 路径距离评价的缩放比例
      GoalDist.scale: 24.0  # 目标距离评价的缩放比例
      RotateToGoal.scale: 32.0  # 旋转到目标评价的缩放比例
      RotateToGoal.slowing_factor: 5.0  # 旋转减速因子
      RotateToGoal.lookahead_time: -1.0  # 向前看时间，-1表示自动确定

local_costmap:  # 局部代价地图的配置开始
  local_costmap:
    ros__parameters:
      update_frequency: 35.0  # 代价地图更新频率，单位为Hz（每秒更新次数）
      publish_frequency: 35.0  # 代价地图发布频率，单位为Hz
      global_frame: odom  # 全局参考框架，通常是里程计odom
      robot_base_frame: base_link  # 机器人基础框架
      use_sim_time: True  # 使用仿真时间（对于仿真环境）
      rolling_window: true  # 是否使用滚动窗口，对于局部代价地图通常设置为true
      width: 10  # 代价地图宽度，单位为米
      height: 10  # 代价地图高度，单位为米

      resolution: 0.05  # 代价地图分辨率，单位为米/像素

      robot_radius: 0.5 # 机器人半径，用于计算碰撞
      plugins: ["voxel_layer", "inflation_layer"]  # 使用的插件列表
      inflation_layer:  # 膨胀层配置
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 1.0  # 成本缩放因子
        inflation_radius: 0.5  # 膨胀半径，单位为米
      voxel_layer:  # 体素层配置
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True  # 是否启用
        publish_voxel_map: True  # 是否发布体素地图
        origin_z: 0.0  # Z轴原点位置
        z_resolution: 0.3  # Z轴分辨率
        z_voxels: 16  # Z轴上的体素数
        max_obstacle_height: 99999.0  # 最大障碍物高度
        mark_threshold: 0  # 标记阈值
        observation_sources: scan  # 观测源
        scan:  # 激光扫描观测源配置
          topic: /scan  # 话题名
          max_obstacle_height: 99999.0  # 最大障碍物高度
          clearing: True  # 是否清除障碍
          marking: True  # 是否标记障碍
          data_type: "LaserScan"  # 数据类型
          raytrace_max_range: 10.0  # 射线追踪最大范围
          raytrace_min_range: 0.0  # 射线追踪最小范围
          obstacle_max_range: 10.0  # 障碍物最大范围
          obstacle_min_range: 0.0  # 障碍物最小范围
      static_layer:  # 静态层配置
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True  # 订阅地图为临时本地类型
      always_send_full_costmap: True  # 是否总是发送完整的代价地图

global_costmap:  # 全局代价地图配置开始
  global_costmap:
    ros__parameters:
      update_frequency: 10.0 # 代价地图更新频率，单位为Hz（每秒更新次数）
      publish_frequency: 10.0  # 代价地图发布频率，单位为Hz
      global_frame: map  # 全局参考框架，通常是地图
      robot_base_frame: base_link  # 机器人基础框架
      use_sim_time: True  # 使用仿真时间（对于仿真环境）
      robot_radius: 0.5  # 机器人半径，用于计算碰撞
      resolution: 0.05  # 代价地图分辨率，单位为米/像素
      track_unknown_space: true  # 是否追踪未知空间
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]  # 使用的插件列表
      obstacle_layer:  # 障碍物层配置
        max_obstacle_height: 99999.0  # 最大障碍物高度
        plugin: "nav2_costmap_2d::ObstacleLayer"  # 使用ObstacleLayer插件
        enabled: True  # 是否启用
        observation_sources: scan  # 观测源
        scan:  # 激光扫描观测源配置
          topic: /scan  # 话题名
          max_obstacle_height: 99999.0  # 最大障碍物高度
          clearing: True  # 是否清除障碍
          marking: True  # 是否标记障碍
          data_type: "LaserScan"  # 数据类型
          raytrace_max_range: 20.0  # 射线追踪最大范围
          raytrace_min_range: 0.0  # 射线追踪最小范围
          obstacle_max_range: 20.0  # 障碍物最大范围
          obstacle_min_range: 0.0  # 障碍物最小范围
      static_layer:  # 静态层配置
        plugin: "nav2_costmap_2d::StaticLayer"  # 使用StaticLayer插件
        map_subscribe_transient_local: True  # 订阅地图为临时本地类型
        inflation_radius: 0.5  # 膨胀半径，单位为米
      inflation_layer:  # 膨胀层配置
        plugin: "nav2_costmap_2d::InflationLayer"  # 使用InflationLayer插件
        cost_scaling_factor: 2.5  # 成本缩放因子
        inflation_radius: 0.5 # 膨胀半径，单位为米
        # inflate_around_unknown: true
        inflate_unknown: true
      always_send_full_costmap: True  # 是否总是发送完整的代价地图

map_server:  # 地图服务器配置
  ros__parameters:  # ROS参数
    use_sim_time: True  # 使用仿真时间
    # 在启动时由"map"启动配置覆盖，或提供默认值。
    # 若要在yaml中使用，请删除tb3_simulation_launch.py文件中的默认"map"值，并在下面提供地图的完整路径。
    yaml_filename: ""  # YAML文件名（未指定）

map_saver:  # 地图保存器配置
  ros__parameters:  # ROS参数
    use_sim_time: True  # 使用仿真时间
    save_map_timeout: 5.0  # 保存地图超时时间（秒）
    free_thresh_default: 0.25  # 默认自由阈值
    occupied_thresh_default: 0.65  # 默认占用阈值
    map_subscribe_transient_local: True  # 订阅地图瞬态本地

planner_server:  # 规划器服务器配置
  ros__parameters:  # ROS参数
    expected_planner_frequency: 20.0  # 预期规划器频率（Hz）
    use_sim_time: True  # 使用仿真时间
    planner_plugins: ["GridBased"]  # 规划器插件列表（网格型）
    GridBased:  # 网格型规划器配置
      plugin: "nav2_navfn_planner/NavfnPlanner"  # 插件名称
      tolerance: 5.0  # 容差
      use_astar: false  # 使用A*算法（否）
      allow_unknown: true  # 允许未知区域


smoother_server:  # 平滑器服务器配置
  ros__parameters:  # ROS参数
    use_sim_time: True  # 使用仿真时间
    smoother_plugins: ["simple_smoother"]  # 平滑器插件列表（简单平滑器）
    simple_smoother:  # 简单平滑器配置
      plugin: "nav2_smoother::SimpleSmoother"  # 插件名称
      tolerance: 1.0e-10  # 容差
      max_its: 1000  # 最大迭代次数
      do_refinement: True  # 进行细化

behavior_server:  # 行为服务器配置
  ros__parameters:  # ROS参数
    costmap_topic: local_costmap/costmap_raw  # 成本地图话题
    footprint_topic: local_costmap/published_footprint  # 足迹话题
    cycle_frequency: 20.0  # 循环频率（Hz）
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]  # 行为插件列表
    spin:  # 自旋行为配置
      plugin: "nav2_behaviors/Spin"  # 插件名称
    backup:  # 备份行为配置
      plugin: "nav2_behaviors/BackUp"  # 插件名称
    drive_on_heading:  # 按方向行驶行为配置
      plugin: "nav2_behaviors/DriveOnHeading"  # 插件名称
    wait:  # 等待行为配置
      plugin: "nav2_behaviors/Wait"  # 插件名称
    assisted_teleop:  # 辅助遥控行为配置
      plugin: "nav2_behaviors/AssistedTeleop"  # 插件名称
    global_frame: odom  # 全局坐标系
    robot_base_frame: base_link  # 机器人基座坐标系
    transform_tolerance: 2.0  # 变换容差
    use_sim_time: True  # 使用仿真时间
    simulate_ahead_time: 3.0  # 模拟提前时间（秒）
    max_rotational_vel: 0.52  # 最大旋转速度（rad/s）
    min_rotational_vel: 0.2  # 最小旋转速度（rad/s）
    rotational_acc_lim: 1.0  # 旋转加速度限制（rad/s^2）

robot_state_publisher:  # 机器人状态发布器配置
  ros__parameters:  # ROS参数
    use_sim_time: True  # 使用仿真时间

waypoint_follower:  # 路标跟随器配置
  ros__parameters:  # ROS参数
    use_sim_time: True  # 使用仿真时间
    loop_rate: 20  # 循环率（Hz）
    stop_on_failure: false  # 失败时停止
    waypoint_task_executor_plugin: "wait_at_waypoint"  # 路标任务执行插件
    wait_at_waypoint:  # 在路标处等待配置
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"  # 插件名称
      enabled: True  # 启用
      waypoint_pause_duration: 200  # 路标暂停持续时间（毫秒）

velocity_smoother:  # 速度平滑器配置
  ros__parameters:  # ROS参数
    use_sim_time: True  # 使用仿真时间
    smoothing_frequency: 20.0  # 平滑频率（Hz）
    scale_velocities: False  # 缩放速度（否）
    feedback: "OPEN_LOOP"  # 反馈类型（开环）
    max_velocity: [10.0, 0.0, 2.0]  # 最大速度限制 [线速度(m/s), 旋转速度(rad/s), 纵向速度(m/s)]
    min_velocity: [0.0, 0.0, -1.0]  # 最小速度限制 [线速度(m/s), 旋转速度(rad/s), 纵向速度(m/s)]
    max_accel: [4.0, 0.0, 3.2]  # 最大加速度 [线加速度(m/s^2), 旋转加速度(rad/s^2), 纵向加速度(m/s^2)]
    max_decel: [-4.0, 0.0, -3.2]  # 最大减速度 [线加速度(m/s^2), 旋转加速度(rad/s^2), 纵向加速度(m/s^2)]
    odom_topic: "odom"  # 里程计话题
    odom_duration: 0.1  # 里程计时长（秒）
    deadband_velocity: [0.0, 0.0, 0.0]  # 死区速度 [线速度(m/s), 旋转速度(rad/s), 纵向速度(m/s)]
    velocity_timeout: 1.0  # 速度超时时间（秒）

slam_toolbox:
  ros__parameters:

    # Plugin params
    solver_plugin: solver_plugins::CeresSolver  # 使用Ceres求解器插件
    ceres_linear_solver: SPARSE_NORMAL_CHOLESKY  # Ceres求解器的线性求解类型
    ceres_preconditioner: SCHUR_JACOBI  # Ceres求解器的预处理器类型
    ceres_trust_strategy: LEVENBERG_MARQUARDT  # Ceres求解器的信任区域策略
    ceres_dogleg_type: TRADITIONAL_DOGLEG  # Ceres求解器的dogleg算法类型
    ceres_loss_function: None  # Ceres求解器的损失函数

    # ROS Parameters
    odom_frame: odom  # 里程计帧名称
    map_frame: map  # 地图帧名称
    base_frame: base_footprint  # 机器人基座帧名称
    scan_topic: /scan  # 激光雷达数据主题
    use_map_saver: true  # 是否使用地图保存功能
    mode: mapping #localization  # 工作模式：映射或定位

    # if you'd like to immediately start continuing a map at a given pose
    # or at the dock, but they are mutually exclusive, if pose is given
    # will use pose
    ##如果您希望立即从给定的姿态或者从停靠站开始继续绘制地图，这两种方式是互斥的，如果给定了姿态，就会使用该姿态。
    # Map continuation parameters (these are currently commented out)
    # map_file_name: /home/orangepi/empty_map_test  # 地图文件名，用于加载地图继续作业
    # map_start_pose: [120.0, 120.0, 0.0]  # 开始地图的初始位置
    # map_start_at_dock: true  # 是否从停靠站开始地图

    debug_logging: false  # 是否启用调试日志
    throttle_scans: 1  # 扫描的节流值
    transform_publish_period: 0.02 #if 0 never publishes odometry  # 变换发布周期，如果为0则不发布里程计
    map_update_interval: 5.0  # 地图更新间隔（秒）
    resolution: 0.3  # 地图分辨率（米）
    max_laser_range: 20.0 #for rastering images  # 最大激光扫描距离，用于栅格图像
    minimum_time_interval: 0.5  # 最小时间间隔（秒）
    transform_timeout: 2.0  # 变换超时（秒）
    tf_buffer_duration: 30.0  # tf缓存持续时间（秒）
    stack_size_to_use: 40000000 #// program needs a larger stack size to serialize large maps  # 程序使用的堆栈大小，用于序列化大型地图
    enable_interactive_mode: true  # 是否启用交互模式

    # General Parameters
    use_scan_matching: true  # 是否使用扫描匹配技术
    use_scan_barycenter: true  # 是否使用扫描重心
    minimum_travel_distance: 0.5  # 触发新的扫描处理的最小移动距离（单位：米）
    minimum_travel_heading: 0.5  # 触发新的扫描处理的最小转向角度（单位：弧度）
    scan_buffer_size: 10  # 扫描缓存的大小（存储多少个扫描）
    scan_buffer_maximum_scan_distance: 10.0  # 缓存中扫描的最大距离（单位：米）
    link_match_minimum_response_fine: 0.1  # 细粒度链接匹配的最小响应阈值
    link_scan_maximum_distance: 1.5  # 链接扫描的最大距离（单位：米）
    loop_search_maximum_distance: 3.0  # 环路搜索的最大距离（单位：米）
    do_loop_closing: true  # 是否执行环路闭合操作
    loop_match_minimum_chain_size: 10  # 环路匹配最小链长度
    loop_match_maximum_variance_coarse: 3.0  # 环路匹配的最大粗略方差
    loop_match_minimum_response_coarse: 0.35  # 环路匹配的最小粗略响应
    loop_match_minimum_response_fine: 0.45  # 环路匹配的最小细粒度响应

    # Correlation Parameters - Correlation Parameters
    correlation_search_space_dimension: 0.5  # 相关搜索空间的尺寸（单位：米）
    correlation_search_space_resolution: 0.01  # 相关搜索空间的分辨率（单位：米）
    correlation_search_space_smear_deviation: 0.1  # 相关搜索空间的偏差

    # Correlation Parameters - Loop Closure Parameters
    loop_search_space_dimension: 8.0  # 环路搜索空间的尺寸（单位：米）
    loop_search_space_resolution: 0.05  # 环路搜索空间的分辨率（单位：米）
    loop_search_space_smear_deviation: 0.03  # 环路搜索空间的偏差

    # Scan Matcher Parameters
    distance_variance_penalty: 0.5  # 距离方差惩罚
    angle_variance_penalty: 1.0  # 角度方差惩罚

    fine_search_angle_offset: 0.00349  # 细搜索角度偏移（单位：弧度）
    coarse_search_angle_offset: 0.349  # 粗搜索角度偏移（单位：弧度）
    coarse_angle_resolution: 0.0349  # 粗搜索角度分辨率（单位：弧度）
    minimum_angle_penalty: 0.9  # 最小角度惩罚
    minimum_distance_penalty: 0.5  # 最小距离惩罚
    use_response_expansion: true  # 是否使用响应扩展
