bt_navigator:  # 行为树导航器的配置开始
  ros__parameters:
    use_sim_time: True  # 使用仿真时间。在仿真环境中设置为True，实际硬件中设置为False
    global_frame: map  # 全局参考框架ID
    robot_base_frame: base_link  # 机器人基础框架ID
    odom_topic: /odom  # 里程计话题
    bt_loop_duration: 100  # 行为树循环的持续时间（以毫秒为单位）
    default_server_timeout: 20  # 默认的服务器超时时间（以秒为单位）
    default_nav_to_pose_bt_xml: $(find-pkg-share move_to_gps_target)/behavior_tree/my_nav_to_pose_bt.xml
    # default_nav_to_pose_bt_xml: $(find-pkg-share nav2_bt_navigator)/behavior_trees/navigate_to_pose_w_replanning_and_recovery.xml
    default_nav_through_poses_bt_xml: $(find-pkg-share nav2_bt_navigator)/behavior_trees/navigate_through_poses_w_replanning_and_recovery.xml
    # default_nav_to_pose_bt_xml: "package://myTestPockage/behavior_trees/my_custom_nav_to_pose_bt.xml"
    #'default_nav_through_poses_bt_xml' 和 'default_nav_to_pose_bt_xml' 使用默认值：
    #nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml 和 
    #nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml。
    # 可以在这里设置它们，也可以通过一个父级启动文件到 Nav2 的 RewrittenYaml 重映射来设置。
    plugin_lib_names:  # 行为树节点插件库名称列表
      - nav2_compute_path_to_pose_action_bt_node  # 计算到特定姿态的路径
      - nav2_compute_path_through_poses_action_bt_node  # 计算通过多个姿态的路径
      - nav2_smooth_path_action_bt_node  # 平滑路径
      - nav2_follow_path_action_bt_node  # 跟随路径
      - nav2_spin_action_bt_node  # 原地旋转
      - nav2_wait_action_bt_node  # 等待
      - nav2_assisted_teleop_action_bt_node  # 协助遥控操作
      - nav2_back_up_action_bt_node  # 后退
      - nav2_drive_on_heading_bt_node  # 沿特定方向前进
      - nav2_clear_costmap_service_bt_node  # 清除代价地图服务
      - nav2_is_stuck_condition_bt_node  # 判断是否卡住
      - nav2_goal_reached_condition_bt_node  # 判断是否到达目标
      - nav2_goal_updated_condition_bt_node  # 判断目标是否更新
      - nav2_globally_updated_goal_condition_bt_node  # 判断全局目标是否更新
      - nav2_is_path_valid_condition_bt_node  # 判断路径是否有效
      - nav2_initial_pose_received_condition_bt_node  # 判断是否接收到初始姿态
      - nav2_reinitialize_global_localization_service_bt_node  # 重新初始化全局定位服务
      - nav2_rate_controller_bt_node  # 频率控制器
      - nav2_distance_controller_bt_node  # 距离控制器
      - nav2_speed_controller_bt_node  # 速度控制器
      - nav2_truncate_path_action_bt_node  # 截断路径
      - nav2_truncate_path_local_action_bt_node  # 截断局部路径
      - nav2_goal_updater_node_bt_node  # 目标更新节点
      - nav2_recovery_node_bt_node  # 恢复节点
      - nav2_pipeline_sequence_bt_node  # 管道序列节点
      - nav2_round_robin_node_bt_node  # 轮询节点
      - nav2_transform_available_condition_bt_node  # 判断变换是否可用
      - nav2_time_expired_condition_bt_node  # 判断时间是否过期
      - nav2_path_expiring_timer_condition  # 路径过期计时器条件
      - nav2_distance_traveled_condition_bt_node  # 判断行驶距离
      - nav2_single_trigger_bt_node  # 单次触发节点
      - nav2_goal_updated_controller_bt_node  # 目标更新控制器
      - nav2_is_battery_low_condition_bt_node  # 判断电池是否低电量
      - nav2_navigate_through_poses_action_bt_node  # 通过多个姿态导航
      - nav2_navigate_to_pose_action_bt_node  # 导航到特定姿态
      - nav2_remove_passed_goals_action_bt_node  # 移除通过的目标
      - nav2_planner_selector_bt_node  # 规划器选择器
      - nav2_controller_selector_bt_node  # 控制器选择器
      - nav2_goal_checker_selector_bt_node  # 目标检查器选择器
      - nav2_controller_cancel_bt_node  # 取消控制器
      - nav2_path_longer_on_approach_bt_node  # 接近时路径变长
      - nav2_wait_cancel_bt_node  # 取消等待
      - nav2_spin_cancel_bt_node  # 取消旋转
      - nav2_back_up_cancel_bt_node  # 取消后退
      - nav2_assisted_teleop_cancel_bt_node  # 取消协助遥控
      - nav2_drive_on_heading_cancel_bt_node  # 取消沿特定方向前进
      - nav2_is_battery_charging_condition_bt_node  # 判断电池是否在充电

bt_navigator_navigate_through_poses_rclcpp_node:  # 导航器通过姿势节点配置
  ros__parameters:  # ROS参数
    use_sim_time: True  # 使用仿真时间

bt_navigator_navigate_to_pose_rclcpp_node:  # 导航器到姿势节点配置
  ros__parameters:  # ROS参数
    use_sim_time: True  # 使用仿真时间


# MPPI控制器服务器配置
controller_server:
  ros__parameters:
    controller_frequency: 15.0  # 控制器频率为每秒30次
    FollowPath:  # FollowPath插件配置
      plugin: "nav2_mppi_controller::MPPIController"  # 使用MPPIController插件
      time_steps: 10  # 时间步数
      model_dt: 0.10  # 模型时间步长
      batch_size: 1000  # 批处理大小
      vx_std: 0.25  # 前向速度标准差
      vy_std: 0.10  # 侧向速度标准差
      wz_std: 0.15  # 角速度标准差
      vx_max: 1.0  # 最大前向速度
      vx_min: -0.2  # 最小前向速度
      vy_max: 3.2  # 最大侧向速度
      wz_max: 0.90  # 最大角速度
      iteration_count: 1  # 迭代次数
      prune_distance: 2.0  # 修剪距离
      transform_tolerance: 0.1  # 变换容差
      temperature: 0.3  # 温度参数
      gamma: 0.015  # Gamma值
      motion_model: "Omni"  # 运动模型为Differential Drive
      visualize: true  # 是否可视化
      reset_period: 1.0  # 重置周期（仅在Humble中使用）
      regenerate_noises: false  # 是否重新生成噪声
      TrajectoryVisualizer:  # 轨迹可视化器配置
        trajectory_step: 30  # 轨迹步长
        time_step: 30  # 时间步长
      AckermannConstraints:  # Ackermann约束配置
        min_turning_r: 0.2  # 最小转弯半径
      critics:  # 所有评价器列表
        - "ConstraintCritic"  # 约束评价器
        # - "CostCritic"  # 成本评价器
        - "GoalCritic"  # 目标评价器
        - "GoalAngleCritic"  # 目标角度评价器
        - "PathAlignCritic"  # 路径对齐评价器
        - "PathFollowCritic"  # 路径跟随评价器
        - "PathAngleCritic"  # 路径角度评价器
        - "PreferForwardCritic"  # 偏向前方评价器
        - "ObstaclesCritic"
        - "TwirlingCritic"
      ConstraintCritic:  # 约束评价器配置
        enabled: true  # 是否启用
        cost_power: 1  # 成本幂
        cost_weight: 4.0  # 成本权重
      GoalCritic:  # 目标评价器配置
        enabled: true  # 是否启用
        cost_power: 1  # 成本幂
        cost_weight: 5.0  # 成本权重
        threshold_to_consider: 1.4  # 考虑阈值
      GoalAngleCritic:  # 目标角度评价器配置
        enabled: true  # 是否启用
        cost_power: 1  # 成本幂
        cost_weight: 3.0  # 成本权重
        threshold_to_consider: 0.5  # 考虑阈值
      PreferForwardCritic:  # 偏向前方评价器配置
        enabled: true  # 是否启用
        cost_power: 1  # 成本幂
        cost_weight: 3.0  # 成本权重
        threshold_to_consider: 0.5  # 考虑阈值
      CostCritic:  # 成本评价器配置
        enabled: true  # 是否启用
        cost_power: 1  # 成本幂
        cost_weight: 3.81  # 成本权重
        critical_cost: 300.0  # 关键成本
        consider_footprint: true  # 是否考虑足迹
        collision_cost: 1000000.0  # 碰撞成本
        near_goal_distance: 1.0  # 接近目标距离
        trajectory_point_step: 2  # 轨迹点步长
      PathAlignCritic:  # 路径对齐评价器配置
        cost_weight: 4.0   # 成本权重
        enabled: true  # 是否启用
        cost_power: 1  # 成本幂
        max_path_occupancy_ratio: 0.05  # 最大路径占用比
        trajectory_point_step: 4  # 轨迹点步长
        threshold_to_consider: 0.5  # 考虑阈值
        offset_from_furthest: 20  # 从最远处偏移
        use_path_orientations: false  # 是否使用路径方向
      PathFollowCritic:  # 路径跟随评价器配置
        enabled: true  # 是否启用
        cost_power: 1  # 成本幂
        cost_weight: 4.0  # 成本权重
        offset_from_furthest: 6  # 从最远处偏移
        threshold_to_consider: 1.4  # 考虑阈值
      PathAngleCritic:  # 路径角度评价器配置
        enabled: true  # 是否启用
        cost_power: 1  # 成本幂
        cost_weight: 4.0  # 成本权重
        offset_from_furthest: 6  # 从最远处偏移
        threshold_to_consider: 0.5  # 考虑阈值
        max_angle_to_furthest: 1.0  # 到最远处的最大角度
        mode: 0  # 模式
      ObstaclesCritic:  # 障碍评价器配置（未启用）
        enabled: true  # 是否启用
        cost_power: 1  # 成本幂
        repulsion_weight: 1.5  # 排斥权重
        critical_weight: 20.0  # 关键权重
        consider_footprint: True  # 是否考虑足迹
        collision_cost: 10000.0  # 碰撞成本
        collision_margin_distance: 0.15  # 碰撞边缘距离
        near_goal_distance: 0.5  # 接近目标距离
        # inflation_radius: 0.55  # 膨胀半径（仅在Humble中使用）
        # cost_scaling_factor: 10.0  # 成本缩放因子（仅在Humble中使用）
      # VelocityDeadbandCritic:  # 速度死区评价器配置（未启用）
      #   enabled: true  # 是否启用
      #   cost_power: 1  # 成本幂
      #   cost_weight: 35.0  # 成本权重
      #   deadband_velocities: [0.05, 0.05, 0.05]  # 死区速度数组
      TwirlingCritic:  # 旋转评价器配置（未启用）
        enabled: False  # 是否启用
        twirling_cost_power: 1  # 旋转成本幂
        twirling_cost_weight: 3.0  # 旋转成本权重

local_costmap:  # 局部代价地图的配置开始
  local_costmap:
    ros__parameters:
      update_frequency: 20.0  # 代价地图更新频率，单位为Hz（每秒更新次数）
      publish_frequency: 2.0  # 代价地图发布频率，单位为Hz
      global_frame: odom  # 全局参考框架，通常是里程计odom
      robot_base_frame: base_link  # 机器人基础框架
      use_sim_time: True  # 使用仿真时间（对于仿真环境）
      rolling_window: true  # 是否使用滚动窗口，对于局部代价地图通常设置为true
      width: 6  # 代价地图宽度，单位为米
      height: 6  # 代价地图高度，单位为米

      resolution: 0.1  # 代价地图分辨率，单位为米/像素

      robot_radius: 0.5 # 机器人半径，用于计算碰撞
      plugins: ["voxel_layer", "inflation_layer"]  # 使用的插件列表
      inflation_layer:  # 膨胀层配置
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 4.0   # 成本缩放因子
        inflation_radius: 1.0  # 膨胀半径，单位为米
      voxel_layer:  # 体素层配置
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True  # 是否启用
        publish_voxel_map: True  # 是否发布体素地图
        origin_z: 0.0  # Z轴原点位置
        z_resolution: 0.3  # Z轴分辨率
        z_voxels: 16  # Z轴上的体素数
        max_obstacle_height: 99999.0  # 最大障碍物高度
        mark_threshold: 0  # 标记阈值
        observation_sources: scan  # 观测源
        scan:  # 激光扫描观测源配置
          topic: /scan  # 话题名
          max_obstacle_height: 99999.0  # 最大障碍物高度
          clearing: True  # 是否清除障碍
          marking: True  # 是否标记障碍
          data_type: "LaserScan"  # 数据类型
          raytrace_max_range: 5.0  # 射线追踪最大范围
          raytrace_min_range: 0.0  # 射线追踪最小范围
          obstacle_max_range: 5.0  # 障碍物最大范围
          obstacle_min_range: 0.0  # 障碍物最小范围
      static_layer:  # 静态层配置
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True  # 订阅地图为临时本地类型
      always_send_full_costmap: True  # 是否总是发送完整的代价地图

global_costmap:  # 全局代价地图配置开始
  global_costmap:
    ros__parameters:
      update_frequency: 1.0 # 代价地图更新频率，单位为Hz（每秒更新次数）
      publish_frequency: 0.5  # 代价地图发布频率，单位为Hz
      global_frame: map  # 全局参考框架，通常是地图
      robot_base_frame: base_link  # 机器人基础框架
      use_sim_time: True  # 使用仿真时间（对于仿真环境）
      robot_radius: 0.5  # 机器人半径，用于计算碰撞
      resolution: 0.1  # 代价地图分辨率，单位为米/像素
      track_unknown_space: true  # 是否追踪未知空间
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]  # 使用的插件列表
      obstacle_layer:  # 障碍物层配置
        max_obstacle_height: 99999.0  # 最大障碍物高度
        plugin: "nav2_costmap_2d::ObstacleLayer"  # 使用ObstacleLayer插件
        enabled: True  # 是否启用
        observation_sources: scan  # 观测源
        scan:  # 激光扫描观测源配置
          topic: /scan  # 话题名
          max_obstacle_height: 99999.0  # 最大障碍物高度
          clearing: True  # 是否清除障碍
          marking: True  # 是否标记障碍
          data_type: "LaserScan"  # 数据类型
          raytrace_max_range: 20.0  # 射线追踪最大范围
          raytrace_min_range: 0.0  # 射线追踪最小范围
          obstacle_max_range: 20.0  # 障碍物最大范围
          obstacle_min_range: 0.0  # 障碍物最小范围
      static_layer:  # 静态层配置
        plugin: "nav2_costmap_2d::StaticLayer"  # 使用StaticLayer插件
        map_subscribe_transient_local: True  # 订阅地图为临时本地类型
        inflation_radius: 0.5  # 膨胀半径，单位为米
      inflation_layer:  # 膨胀层配置
        plugin: "nav2_costmap_2d::InflationLayer"  # 使用InflationLayer插件
        cost_scaling_factor: 2.5  # 成本缩放因子
        inflation_radius: 2.0 # 膨胀半径，单位为米
        # inflate_around_unknown: true
        inflate_unknown: true
      always_send_full_costmap: True  # 是否总是发送完整的代价地图

map_server:  # 地图服务器配置
  ros__parameters:  # ROS参数
    use_sim_time: True  # 使用仿真时间
    # 在启动时由"map"启动配置覆盖，或提供默认值。
    # 若要在yaml中使用，请删除tb3_simulation_launch.py文件中的默认"map"值，并在下面提供地图的完整路径。
    yaml_filename: ""  # YAML文件名（未指定）

map_saver:  # 地图保存器配置
  ros__parameters:  # ROS参数
    use_sim_time: True  # 使用仿真时间
    save_map_timeout: 5.0  # 保存地图超时时间（秒）
    free_thresh_default: 0.25  # 默认自由阈值
    occupied_thresh_default: 0.65  # 默认占用阈值
    map_subscribe_transient_local: True  # 订阅地图瞬态本地

planner_server:  # 规划器服务器配置
  ros__parameters:  # ROS参数
    expected_planner_frequency: 1.0  # 预期规划器频率（Hz）
    use_sim_time: True  # 使用仿真时间
    planner_plugins: ["GridBased"]  # 规划器插件列表（网格型）
    GridBased:  # 网格型规划器配置
      plugin: "nav2_navfn_planner/NavfnPlanner"  # 插件名称
      tolerance: 1.5  # 容差
      use_astar: false  # 使用A*算法（否）
      allow_unknown: true  # 允许未知区域
      cost_factor: 0.55
      neutral_cost: 66
      lethal_cost: 253
      use_grid_path: false

# planner_server:
#   ros__parameters:
#     expected_planner_frequency: 2.0  # 预期规划器频率（Hz）

#     planner_plugins: ["GridBased"]
#     use_sim_time: True

#     GridBased:
#       plugin: "nav2_smac_planner/SmacPlanner2D" # In Iron and older versions, "/" was used instead of "::"
#       tolerance: 0.125                      # tolerance for planning if unable to reach exact pose, in meters
#       downsample_costmap: false             # whether or not to downsample the map
#       downsampling_factor: 1                # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
#       allow_unknown: true                   # allow traveling in unknown space
#       max_iterations: 10000000               # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
#       max_on_approach_iterations: 1000      # maximum number of iterations to attempt to reach goal once in tolerance
#       max_planning_time: 3.0                # max time in s for planner to plan, smooth
#       cost_travel_multiplier: 2.0           # Cost multiplier to apply to search to steer away from high cost areas. Larger values will place in the center of aisles more exactly (if non-`FREE` cost potential field exists) but take slightly longer to compute. To optimize for speed, a value of 1.0 is reasonable. A reasonable tradeoff value is 2.0. A value of 0.0 effective disables steering away from obstacles and acts like a naive binary search A*.
#       use_final_approach_orientation: false # Whether to set the final path pose at the goal's orientation to the requested orientation (false) or in line with the approach angle so the robot doesn't rotate to heading (true)
#       smoother:
#         max_iterations: 1000
#         w_smooth: 0.8
#         w_data: 0.01
#         tolerance: 1.0e-10



smoother_server:  # 平滑器服务器配置
  ros__parameters:  # ROS参数
    use_sim_time: True  # 使用仿真时间
    smoother_plugins: ["simple_smoother"]  # 平滑器插件列表（简单平滑器）
    simple_smoother:  # 简单平滑器配置
      plugin: "nav2_smoother::SimpleSmoother"  # 插件名称
      tolerance: 1.0e-10  # 容差
      max_its: 1000  # 最大迭代次数
      do_refinement: False  # 进行细化

behavior_server:  # 行为服务器配置
  ros__parameters:  # ROS参数
    costmap_topic: local_costmap/costmap_raw  # 成本地图话题
    footprint_topic: local_costmap/published_footprint  # 足迹话题
    cycle_frequency: 10.0  # 循环频率（Hz）
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]  # 行为插件列表
    spin:  # 自旋行为配置
      plugin: "nav2_behaviors/Spin"  # 插件名称
    backup:  # 备份行为配置
      plugin: "nav2_behaviors/BackUp"  # 插件名称
    drive_on_heading:  # 按方向行驶行为配置
      plugin: "nav2_behaviors/DriveOnHeading"  # 插件名称
    wait:  # 等待行为配置
      plugin: "nav2_behaviors/Wait"  # 插件名称
    assisted_teleop:  # 辅助遥控行为配置
      plugin: "nav2_behaviors/AssistedTeleop"  # 插件名称
    global_frame: odom  # 全局坐标系
    robot_base_frame: base_link  # 机器人基座坐标系
    transform_tolerance: 2.0  # 变换容差
    use_sim_time: True  # 使用仿真时间
    simulate_ahead_time: 3.0  # 模拟提前时间（秒）
    max_rotational_vel: 0.52  # 最大旋转速度（rad/s）
    min_rotational_vel: 0.2  # 最小旋转速度（rad/s）
    rotational_acc_lim: 1.0  # 旋转加速度限制（rad/s^2）

robot_state_publisher:  # 机器人状态发布器配置
  ros__parameters:  # ROS参数
    use_sim_time: True  # 使用仿真时间

waypoint_follower:  # 路标跟随器配置
  ros__parameters:  # ROS参数
    use_sim_time: True  # 使用仿真时间
    loop_rate: 20  # 循环率（Hz）
    stop_on_failure: false  # 失败时停止
    waypoint_task_executor_plugin: "wait_at_waypoint"  # 路标任务执行插件
    wait_at_waypoint:  # 在路标处等待配置
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"  # 插件名称
      enabled: True  # 启用
      waypoint_pause_duration: 200  # 路标暂停持续时间（毫秒）

velocity_smoother:  # 速度平滑器配置
  ros__parameters:  # ROS参数
    use_sim_time: True  # 使用仿真时间
    smoothing_frequency: 20.0  # 平滑频率（Hz）
    scale_velocities: False  # 缩放速度（否）
    feedback: "OPEN_LOOP"  # 反馈类型（开环）
    max_velocity: [10.0, 10.0, 2.0]  # 最大速度限制 [线速度(m/s), 旋转速度(rad/s), 纵向速度(m/s)]
    min_velocity: [-10.6, -10.0, -1.0]  # 最小速度限制 [线速度(m/s), 旋转速度(rad/s), 纵向速度(m/s)]
    max_accel: [0.8, 1.0, 2.0]  # 最大加速度 [线加速度(m/s^2), 旋转加速度(rad/s^2), 纵向加速度(m/s^2)]
    max_decel: [-10.2, -10.2, -0.8]  # 最大减速度 [线加速度(m/s^2), 旋转加速度(rad/s^2), 纵向加速度(m/s^2)]
    odom_topic: "odom"  # 里程计话题
    odom_duration: 0.1  # 里程计时长（秒）
    deadband_velocity: [0.0, 0.0, 0.0]  # 死区速度 [线速度(m/s), 旋转速度(rad/s), 纵向速度(m/s)]
    velocity_timeout: 1.0  # 速度超时时间（秒）

slam_toolbox:
  ros__parameters:

    # Plugin params
    solver_plugin: solver_plugins::CeresSolver  # 使用Ceres求解器插件
    ceres_linear_solver: SPARSE_NORMAL_CHOLESKY  # Ceres求解器的线性求解类型
    ceres_preconditioner: SCHUR_JACOBI  # Ceres求解器的预处理器类型
    ceres_trust_strategy: LEVENBERG_MARQUARDT  # Ceres求解器的信任区域策略
    ceres_dogleg_type: TRADITIONAL_DOGLEG  # Ceres求解器的dogleg算法类型
    ceres_loss_function: None  # Ceres求解器的损失函数

    # ROS Parameters
    odom_frame: odom  # 里程计帧名称
    map_frame: map  # 地图帧名称
    base_frame: base_footprint  # 机器人基座帧名称
    scan_topic: /scan  # 激光雷达数据主题
    use_map_saver: true  # 是否使用地图保存功能
    mode: mapping #localization  # 工作模式：映射或定位

    # if you'd like to immediately start continuing a map at a given pose
    # or at the dock, but they are mutually exclusive, if pose is given
    # will use pose
    ##如果您希望立即从给定的姿态或者从停靠站开始继续绘制地图，这两种方式是互斥的，如果给定了姿态，就会使用该姿态。
    # Map continuation parameters (these are currently commented out)
    # map_file_name: /home/orangepi/empty_map_test  # 地图文件名，用于加载地图继续作业
    # map_start_pose: [120.0, 120.0, 0.0]  # 开始地图的初始位置
    # map_start_at_dock: true  # 是否从停靠站开始地图

    debug_logging: false  # 是否启用调试日志
    throttle_scans: 1  # 扫描的节流值
    transform_publish_period: 0.02 #if 0 never publishes odometry  # 变换发布周期，如果为0则不发布里程计
    map_update_interval: 5.0  # 地图更新间隔（秒）
    resolution: 0.3  # 地图分辨率（米）
    max_laser_range: 20.0 #for rastering images  # 最大激光扫描距离，用于栅格图像
    minimum_time_interval: 0.5  # 最小时间间隔（秒）
    transform_timeout: 2.0  # 变换超时（秒）
    tf_buffer_duration: 30.0  # tf缓存持续时间（秒）
    stack_size_to_use: 40000000 #// program needs a larger stack size to serialize large maps  # 程序使用的堆栈大小，用于序列化大型地图
    enable_interactive_mode: true  # 是否启用交互模式

    # General Parameters
    use_scan_matching: true  # 是否使用扫描匹配技术
    use_scan_barycenter: true  # 是否使用扫描重心
    minimum_travel_distance: 0.5  # 触发新的扫描处理的最小移动距离（单位：米）
    minimum_travel_heading: 0.5  # 触发新的扫描处理的最小转向角度（单位：弧度）
    scan_buffer_size: 10  # 扫描缓存的大小（存储多少个扫描）
    scan_buffer_maximum_scan_distance: 10.0  # 缓存中扫描的最大距离（单位：米）
    link_match_minimum_response_fine: 0.1  # 细粒度链接匹配的最小响应阈值
    link_scan_maximum_distance: 1.5  # 链接扫描的最大距离（单位：米）
    loop_search_maximum_distance: 3.0  # 环路搜索的最大距离（单位：米）
    do_loop_closing: true  # 是否执行环路闭合操作
    loop_match_minimum_chain_size: 10  # 环路匹配最小链长度
    loop_match_maximum_variance_coarse: 3.0  # 环路匹配的最大粗略方差
    loop_match_minimum_response_coarse: 0.35  # 环路匹配的最小粗略响应
    loop_match_minimum_response_fine: 0.45  # 环路匹配的最小细粒度响应

    # Correlation Parameters - Correlation Parameters
    correlation_search_space_dimension: 0.5  # 相关搜索空间的尺寸（单位：米）
    correlation_search_space_resolution: 0.01  # 相关搜索空间的分辨率（单位：米）
    correlation_search_space_smear_deviation: 0.1  # 相关搜索空间的偏差

    # Correlation Parameters - Loop Closure Parameters
    loop_search_space_dimension: 8.0  # 环路搜索空间的尺寸（单位：米）
    loop_search_space_resolution: 0.05  # 环路搜索空间的分辨率（单位：米）
    loop_search_space_smear_deviation: 0.03  # 环路搜索空间的偏差

    # Scan Matcher Parameters
    distance_variance_penalty: 0.5  # 距离方差惩罚
    angle_variance_penalty: 1.0  # 角度方差惩罚

    fine_search_angle_offset: 0.00349  # 细搜索角度偏移（单位：弧度）
    coarse_search_angle_offset: 0.349  # 粗搜索角度偏移（单位：弧度）
    coarse_angle_resolution: 0.0349  # 粗搜索角度分辨率（单位：弧度）
    minimum_angle_penalty: 0.9  # 最小角度惩罚
    minimum_distance_penalty: 0.5  # 最小距离惩罚
    use_response_expansion: true  # 是否使用响应扩展
